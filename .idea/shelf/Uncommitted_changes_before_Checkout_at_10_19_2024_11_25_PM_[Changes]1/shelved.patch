Index: codeCainUmlEditor/src/main/Java/Relationship.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.ArrayList;\r\nimport java.util.Collection;\r\nimport java.util.HashSet;\r\n\r\npublic class Relationship {\r\n\r\n    /**\r\n     * Set with 2 class names that will be in the relationship\r\n     */\r\n    private final Collection<String> classNames;\r\n\r\n    /**\r\n     * arraylist for every single relationship created.\r\n     * This is a static list, so every relationship created only exists in this list\r\n     */\r\n    public static final ArrayList<Relationship> relationshipList = new ArrayList<Relationship>();\r\n\r\n    /**\r\n     * constructor for relationship class. This is private\r\n     * and is only used by the addRelationship method\r\n     * @param class1 name of first class to add\r\n     * @param class2 name of second class to add\r\n     */\r\n    private Relationship(String class1, String class2){\r\n        this.classNames = new HashSet<String>();\r\n        classNames.add(class1);\r\n        classNames.add(class2);\r\n    }\r\n\r\n    /**\r\n     * deletes all relationships that contain the specified class\r\n     */\r\n    public static void removeAttachedRelationships(String className) /*throws Exception*/ {\r\n        //if(!classes.classExists(className)) throw new Exception(\"class not found\");\r\n        relationshipList.removeIf(r -> r.classNames.contains(className));\r\n    }\r\n\r\n    /**\r\n     * checks if the relationship already exists\r\n     * @param class1 class to look for\r\n     * @return true if there is a relationship with that class\r\n     */\r\n    public static boolean relationshipExists(String class1){\r\n        for (Relationship r : relationshipList){\r\n            if (r.classNames.contains(class1))\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * relationshipExists\r\n     * checks if the relationship already exists\r\n     * @param class1 first class\r\n     * @param class2 second class\r\n     * @return true if the relationship exists\r\n     */\r\n    public static boolean relationshipExists(String class1, String class2){\r\n        for (Relationship r: relationshipList){\r\n            if (\r\n                    r.classNames.contains(class1)\r\n                            && r.classNames.contains(class2)\r\n            )\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * helper method to check if both classes exists and dont already have a relationship\r\n     * @param class1 first class\r\n     * @param class2 second class\r\n     * @return true if entry is valid\r\n     */\r\n    private static boolean entryIsValid(String class1, String class2){\r\n        return !relationshipExists(class1,class2)\r\n                && Class.classMap.containsKey(class1)\r\n                && Class.classMap.containsKey(class2);\r\n    }\r\n\r\n    /**\r\n     * adds a relationship to the relationship map\r\n     *\r\n     * @param class1 the first class to add\r\n     * @param class2 the second class to add\r\n     * @return true if the input is valid, false if the input is invalid.\r\n     */\r\n    public static boolean addRelationship(String class1, String class2){\r\n\r\n        if (relationshipExists(class1,class2)){\r\n            System.out.println(\"relationship already exists\");\r\n            return false;\r\n        }\r\n        if (!Class.classMap.containsKey(class1)){\r\n            System.out.println(class1 + \" is not an existing class\");\r\n            return false;\r\n        }\r\n        if (!Class.classMap.containsKey(class2)){\r\n            System.out.println(class2 + \" is not an existing class\");\r\n            return false;\r\n        }\r\n\r\n        Relationship newRelationship = new Relationship(class1, class2);\r\n\r\n        relationshipList.add(newRelationship);\r\n        return true;\r\n    }\r\n\r\n//\r\n//    /**\r\n//     * adds a relationship to the relationship map\r\n//     * @param class1 the first class to add\r\n//     * @param class2 the second class to add\r\n//     */\r\n//    public static void addRelationship(String class1, String class2) throws IllegalArgumentException {\r\n//\r\n//        if (relationshipExists(class1,class2)){\r\n//            throw new IllegalArgumentException(\"class/relationship exists\");\r\n//        }\r\n//        if (!Class.classMap.containsKey(class1)){\r\n//            throw new IllegalArgumentException(class1 + \" is not an existing class\");\r\n//        }\r\n//        if (!Class.classMap.containsKey(class2)){\r\n//            throw new IllegalArgumentException(class2 + \" is not an existing class\");\r\n//        }\r\n//\r\n//        Relationship newRelationship = new Relationship(class1, class2);\r\n//\r\n//        relationshipList.add(newRelationship);\r\n//    }\r\n\r\n    /**\r\n     * removes a relationship from the relationship array.\r\n     * @param class1 the first class to add\r\n     * @param class2 the second class to add\r\n     * @return false if the relationship already exists, otherwise it returns true;\r\n     */\r\n    public static boolean removeRelationship(String class1, String class2){\r\n\r\n        for (Relationship r : relationshipList){\r\n            if (r.classNames.contains(class1)\r\n                    && r.classNames.contains(class2))\r\n            {\r\n                relationshipList.remove(r);\r\n                return false;\r\n            }\r\n        }\r\n\r\n        System.out.println(\"relationship not found\");\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * takes the list of relationships and returns it as a string\r\n     * @return String - the list of relationships\r\n     */\r\n    public static String listToString() {\r\n        if (relationshipList.isEmpty()) return \"\";\r\n\r\n        StringBuilder s = new StringBuilder();\r\n\r\n        for (Relationship r: relationshipList){\r\n            String[] names = r.getClassNames();\r\n\r\n            if (names.length < 2) System.out.println(\"There are no clases to print out\");\r\n\r\n            s.append(names[0]).append(\" ------- \").append(names[1]).append(\"\\n\");\r\n        }\r\n        return s.toString();\r\n    }\r\n\r\n//    /**\r\n//     * replaces the old class name with a new class name for every relationship where that class is used\r\n//     * @param oldName name to replace\r\n//     * @param newName name to replace with\r\n//     */\r\n//    public static void renameClassInRelationships(String oldName, String newName) throws Exception{\r\n//        if (!relationshipExists(oldName)) throw new Exception(\"relationship does not exist\");\r\n//        for (Relationship r : relationshipList){\r\n//            if (r.classNames.contains(oldName)){\r\n//                r.classNames.remove(oldName);\r\n//                r.classNames.add(newName);\r\n//            }\r\n//        }\r\n//    }\r\n\r\n    /**\r\n     * this version of the method has return statements to handle the errors\r\n     * replaces the old class name with a new class name for every relationship where that class is used\r\n     * @param oldName name to replace\r\n     * @param newName name to replace with\r\n     * @return true if the class is renamed. Return false if the class to rename doesn't exist.\r\n     */\r\n    public static boolean renameClassInRelationships(String oldName, String newName){\r\n        if (!relationshipExists(oldName)){\r\n            System.out.println(\"relationship does not exist\");\r\n            return false;\r\n        }\r\n        for (Relationship r : relationshipList){\r\n            if (r.classNames.contains(oldName)){\r\n                r.classNames.remove(oldName);\r\n                r.classNames.add(newName);\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * helper method to get the names of the classes in the relationship in an\r\n     * array\r\n     * @return String[]\r\n     */\r\n    private String[] getClassNames(){\r\n        String[] names = new String[2];\r\n        this.classNames.toArray(names);\r\n        return names;\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/codeCainUmlEditor/src/main/Java/Relationship.java b/codeCainUmlEditor/src/main/Java/Relationship.java
--- a/codeCainUmlEditor/src/main/Java/Relationship.java	
+++ b/codeCainUmlEditor/src/main/Java/Relationship.java	
@@ -104,6 +104,7 @@
 
         relationshipList.add(newRelationship);
         return true;
+        
     }
 
 //
