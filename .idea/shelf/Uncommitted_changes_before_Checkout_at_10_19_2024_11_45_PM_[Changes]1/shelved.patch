Index: codeCainUmlEditor/src/main/Java/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>public class Main {\r\n\r\n    public static void main(String[] args) {\r\n        System.out.println(\"hello world\");\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/codeCainUmlEditor/src/main/Java/Main.java b/codeCainUmlEditor/src/main/Java/Main.java
--- a/codeCainUmlEditor/src/main/Java/Main.java	
+++ b/codeCainUmlEditor/src/main/Java/Main.java	
@@ -1,6 +1,181 @@
+import java.util.Arrays;
+import java.util.Scanner;
+
 public class Main {
 
     public static void main(String[] args) {
-        System.out.println("hello world");
-    }
+        while (true) {
+            Scanner scan = new Scanner(System.in);
+            String command = scan.nextLine().trim();
+            System.out.println(executeCommand(command));
+        }
+    }
+
+    private static String executeCommand(String command) {
+        String[] tokens = command.split(" ");
+        if (tokens.length == 0) {
+            return "No command entered.";
+        }
+
+        String commandName = tokens[0].toLowerCase();
+
+        // Handling different commands by name
+        switch (commandName) {
+            case "help":
+                return """
+                        Available commands:
+
+                        Class Operations:
+                        1. add class 'name'                  - Adds a new class with a unique name.
+                        2. delete class 'name'               - Deletes the class with the specified name.
+                        3. rename class 'oldName' 'newName'  - Renames the class from 'oldName' to 'newName'.
+
+                        Relationship Operations:
+                        1. add relationship 'source' 'destination'   - Adds a relationship between 'source' and 'destination' classes.
+                        2. delete relationship 'source' 'destination' - Deletes the relationship between 'source' and 'destination'.
+
+                        Field Operations:
+                        1. add field 'className' 'fieldName'  - Adds a unique field to the specified class.
+                        2. delete field 'className' 'fieldName' - Removes a field from the specified class.
+                        3. rename field 'className' 'oldFieldName' 'newFieldName' - Renames a field in the specified class.
+
+                        Method Operations:
+                        1. add method 'className' 'methodName' 'parameters' - Adds a unique method to the specified class.
+                        2. delete method 'className' 'methodName' - Removes the method from the specified class.
+                        3. rename method 'className' 'oldMethodName' 'newMethodName' - Renames a method in the specified class.
+                        4. add parameter 'className' 'methodName' 'parameterName' 'parameterType' - Adds a parameter to a method.
+                        5. delete parameter 'className' 'methodName' 'parameterName' - Removes a parameter from a method.
+
+                        Save/Load Operations:
+                        1. save                                - Saves the current state of the project.
+                        2. load                                - Loads the project state from a file.
+
+                        Listing Operations:
+                        1. list classes                        - Lists all the classes in the project.
+                        2. list class 'className'              - Lists the contents (fields and methods) of the specified class.
+                        3. list relationships                  - Lists all the relationships between classes.
+
+                        Other Commands:
+                        1. help                                - Shows this help message.
+                        2. exit                                - Exits the application.
+                        """;
+
+            case "add":
+                if (tokens.length == 3 && tokens[1].equalsIgnoreCase("class")) {
+                    String className = tokens[2];
+                    Class.addClass(className);
+                    return "Class '" + className + "' added.";
+                } else if (tokens.length == 4 && tokens[1].equalsIgnoreCase("relationship")) {
+                    try {
+                        String class1 = tokens[2];
+                        String class2 = tokens[3];
+                        Relationship.addRelationship(class1, class2);
+                        return "Relationship between '" + class1 + "' and '" + class2 + "' added.";
+                    } catch (Exception e) {
+                        return "Error: " + e.getMessage();
+                    }
+
+                } else if (tokens.length == 4 && tokens[1].equalsIgnoreCase("field")) {
+                    String className = tokens[2];
+                    String fieldName = tokens[3];
+                    Fields fields = new Fields();
+                    fields.addField(className, fieldName);
+                    return "Field '" + fieldName + "' added to class '" + className + "'.";
+
+                } else if (tokens.length >= 5 && tokens[1].equalsIgnoreCase("method")) {
+                    String className = tokens[2];
+                    String methodName = tokens[3];
+                    String[] parameters = Arrays.copyOfRange(tokens, 4, tokens.length); // Capture all parameters after method name
+                    Methods methods = new Methods();
+                    methods.addMethod(className, methodName, Arrays.asList(parameters));
+                    return "Method '" + methodName + "' added to class '" + className + "' with parameters: " + Arrays.toString(parameters) + ".";
+
+                } else {
+                    return "Invalid command. Use 'help' for available commands.";
+                }
+            case "delete":
+                if (tokens.length == 3 && tokens[1].equalsIgnoreCase("class")) {
+                    String className = tokens[2];
+                    Class.removeClass(className);
+                    Relationship.removeAttachedRelationships(className); // Remove any relationships involving this class
+                    return "Class '" + className + "' and its relationships deleted.";
+                } else if (tokens.length == 4 && tokens[1].equalsIgnoreCase("relationship")) {
+                    try {
+                        String class1 = tokens[2];
+                        String class2 = tokens[3];
+                        Relationship.removeRelationship(class1, class2);
+                        return "Relationship between '" + class1 + "' and '" + class2 + "' deleted.";
+                    } catch (Exception e) {
+                        return "Error: " + e.getMessage();
+                    }
+                } else if (tokens.length == 4 && tokens[1].equalsIgnoreCase("field")) { //Not Working
+                    String className = tokens[2];
+                    String fieldName = tokens[3];
+                    Fields fields = new Fields();
+                    fields.removeField(className, fieldName);
+                    return "Field '" + fieldName + "' removed from class '" + className + "'.";
+
+                } else if (tokens.length == 4 && tokens[1].equalsIgnoreCase("method")) {
+                    String className = tokens[2];
+                    String methodName = tokens[3];
+                    Methods methods = new Methods();
+                    methods.removeMethod(className, methodName);
+                    return "Method '" + methodName + "' removed from class '" + className + "'.";
+                } else {
+                    return "Invalid command. Use 'help' for available commands.";
+                }
+            case "rename":
+                if (tokens.length == 4 && tokens[1].equalsIgnoreCase("class")) {
+                    String oldName = tokens[2];
+                    String newName = tokens[3];
+                    Class.renameClass(oldName, newName);
+                    return "Class '" + oldName + "' renamed to '" + newName + "'.";
+                } else if (tokens.length == 5 && tokens[1].equalsIgnoreCase("field")) {
+                    String className = tokens[2];
+                    String oldFieldName = tokens[3];
+                    String newFieldName = tokens[4];
+                    Fields fields = new Fields();
+                    fields.renameField(className, oldFieldName, newFieldName);
+                    return "Field '" + oldFieldName + "' renamed to '" + newFieldName + "' in class '" + className + "'.";
+                } else if (tokens.length == 5 && tokens[1].equalsIgnoreCase("method")) {
+                    String className = tokens[2];
+                    String oldMethodName = tokens[3];
+                    String newMethodName = tokens[4];
+                    Methods methods = new Methods();
+                    methods.renameMethod(className, oldMethodName, newMethodName);
+                    return "Method '" + oldMethodName + "' renamed to '" + newMethodName + "' in class '" + className + "'.";
+                } else {
+                    return "Invalid command. Use 'help' for available commands.";
+                }
+            case "list":
+                if (tokens.length == 2 && tokens[1].equalsIgnoreCase("classes")) {
+                    if (Class.classMap.isEmpty()) {
+                        return "No classes available.";
+                    } else {
+                        StringBuilder sb = new StringBuilder();
+                        sb.append("Classes:\n");
+                        for (String className : Class.classMap.keySet()) {
+                            sb.append("- ").append(className).append("\n");
+                        }
+                        return sb.toString();
+                    }
+                } else if (tokens.length == 2 && tokens[1].equalsIgnoreCase("relationships")) {
+                    try {
+                        String relationships = Relationship.listToString();
+                        if (relationships.isEmpty()) {
+                            return "No relationships available.";
+                        } else {
+                            return "Relationships:\n" + relationships;
+                        }
+                    } catch (Exception e) {
+                        return "Error: " + e.getMessage();
+                    }
+                }
+                return "Invalid command. Use: list classes.";
+            default:
+                return "Unknown command. Type 'help' to see available commands.";
+        }
+    }
+
+
 }
